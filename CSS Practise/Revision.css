/* CSS  is a stylesheet language used to describe the presentation of a document written in HTML or Xml. It describe how elements should be rendered on screen, on paper, in speech or on other media */
/*There are 3 different way to apply css to our document there is an external style. Sheet, internal style sheet or we could apply CSS inline with an element.*/

/* Topic 1 */

/*There are 3 different way to apply CSS to our document i.e
1.) External Style Sheet  2.)Internal Style Sheet  and 3.) Inline css with an element */

p4 {
    color: greenyellow;
}


/* The inlined CSS take precedent over either type of style sheet internal or external because its applied directly to the element itself */

/* best commonly used method for using css is external style sheet,it keep our css code completely seperate from our html */

/*Topic 2*/

/* There are 3 type of basic selector in CSS i.e

1> Element Selector  2>class selector  3> id selector*/

/*Element Selector example*/
p2 {
    color: blue;
    font-size: 64px;
}

/*Class Selector examples*/

.Ankit {
    color: orange;
}

/*id selector*/

#third {
    font-style: italic;
}

h1,
h2 {
    color: blueviolet;
}

/* However,it is not good practise to really use id inside of your CSS now it will validate your code has no problem using an id */

/*However typically we should use classes and sometime element selector but rarely id selector*/

/* This means selector is looking for any h2 that exist inside of an h1. so it doesnot work*/
h1 h2 {
    color: aqua;
}

/*Selecting an element thats inside another element*/

section span {
    text-transform: uppercase;
    background-color: gold;
}

.highlight {
    text-transform: uppercase;
    background-color: rosybrown;
}

/* This would keep our css much more organized and actually more reusable, it is more flexible this way because we might have same span elements doing other things that we did not want to apply this rule set too*/

/* Universal Selector */

/* This means it's selecting everything on the page*/
* {
    font-family: monospace;
}

/* CSS is an acronym for cascading style sheets ( it means css work like a waterfall i.e it work from top to down */

.hero {
    color: aquamarine;
}


p {
    color: #ff0000;
}

/* But cascading don't work when in the above case, as we can see that class have more specificity than an element selector*/


/*Inheritance = That is where another element inherits the settings from or the parent element, so the body element is parent to every other element*/

/* 
body {
font-size: 22px;            it is inheritance
border: 3px solid black;     it is Non inheritance
}  */

/*we want to write less code and be more efficient and inheritance helps us to do that.
Form element do not inherit*/

/*Topic 3*/
body {
    font-size: 22px;
    font-family: Arial, Helvetica, sans-serif;
    line-height: 1.5;
    background: papayawhip;
    /* color: rgb(255, 0,0);         /* [ if (0,0,0) then it will become black and if (255,255,255) then it will become white] */

}

/* There is rgba which adds an alpha channel and this alpha channel guides the transparency */
#a1 {
    color: rgba(0, 0, 255, 0.5);
    /* Note that the alfa have value upto 0-1 not 0-255*/
}

/*Hexadecimal which is a common way to specify colors. It works like rgb and it has its own way of coding the values. Through it goes from 0 to 9 and then also uses letters a through f  */

#a2 {
    color: #123456
        /* The lowest value is 000000(000) and the highest value is FFFFFF(FFF) */
}

/* FF0000 it is red,000 black, 808080 is gray */

/* Topic 4*/

/* CSS units determine the size of everything in our page. It is of two categories i.e relative and absolute */

header {
    width: 80%;
}

/* If the width of parent class i.e header is 80% than we are only using up to 50% of 80% of the pg*/
h3 {
    border: 2px dashed red;
    width: 50%;
}

/* rem: This is the unit that we'll typically used for fontsize and it relates to the fontsize of root element  */
/* we shouldn't set a font size on the root element. So for HTML element(root element) we typically wouldn't set a font size because we want to let the browser handle that and set the default font size*/

main {
    font-size: 3rem;
}

#a3 {
    font-size: 1.5rem;
}

/*  It's not relative to the parent,it is relative to the root which is defined by browser. Using the rem and always looking at the root definitely help*/

/* When we set the font size on an element, em doesn't looks at the parent it looks at the element itself and so we could use it for something like margin and padding */

h3 {
    font-size: 3rem;
    /* 1em= the font-size of the parent element*/
    padding: 0.5em;
}

/*Both em and rem are relative units in CSS, used mainly for:
(Fonts,Padding,Margin,Widths/Heights,Media queries, etc.)

✅ em – Relative to Parent Element

1em = the font-size of the parent element
Useful for creating scalable layouts that adjust based on where they are used
Nested ems multiply
it is inherited

Example:
body {
  font-size: 16px;
}

.container {
  font-size: 2em; /* 2 × 16px = 32px
 } */



/* ✅ rem – Relative to Root Element

1rem = the font-size of the <html> element
"rem" = "root em"
Easier to control globally and prevents nesting issues
not inherited

Example:

html {
  font-size: 16px;
}

h1 {
  font-size: 2rem; /* 2 × 16px = 32px 
}

p {
  font-size: 1rem; /* 1 × 16px = 16px 
}

use rem for base sizing, like font-size, padding, etc., where consistency is key.
Use em when you want components to scale based on their container. */



/* ch is a length unit. The 1ch is equal to the width of the "0"zero character of the current font*/

/*
1. Input field width: 
  
input {
   width: 20ch;
}
 This sets the width of the input box to fit approximately 20 characters
 
 2. Text containers
 
 p{
 max-width: 60ch;
}
 Limit paragraph width to roughly 60 characters per line for better readability
*/
#a4 {
    width: 40ch;
}

/* vw ( Viewport Width) = 1% of viewport's width
   vh ( Viewport Height) = 1% of viewport's height*/

/* main{
    width: 50vw;                     
    background-color: skyblue;  
    }  */
/* Most of the time we use % of vw */
/* The width of our paragraph is actually wider tham the width of our main element. we have actually set
    the main element to 50% of the width of the full page*/



/*    we will get scroll bar on the bottom. If 100 percentage(%) then not get scroll bar on the bottom

   body{
    width:100vw;
   }
    
   */

body {
    min-height: 100vh;
    /* This will allow the body to grow with the content if it outgrows the viewport but at the same time it's now the full page*/
}


/* Topic 5 */
/* CSS Box Model*/
h4 {
    border: 2px dashed red;
    width: 400px;
    font-size: 3rem;
    padding: 0.5em;

}

/* css reset */
/* *{
    margin: 0;
    padding: 0;
      box-sizing: border box; [ Border box really helps us to calculate the sizes that we are assigning ]
      box-sizing: content box; [ content box help to setting the size of the content only. It doesn't include calculating size of the padding or border margin at all ]
   } 
    */
h5 {
    margin: 1.5em 2em 2em 5em;
    /* margin-top= 1.5em;
        margin-right= 2em;
        margin-bottom= 2em;
        margin-left= 2em;
      */
    padding: 1.5em 2em 2em 2em;
    border: 2px dashed purple;
    /* border-top: 5px solid green;
    border-right: 10px dotted blue; */
    border-top-style: red;
    border-top-width: 5px;
    border-top-color: blue;

    /* Outline: It is not part of the box model, difference between outline and border is that it doesnot take up space */
    outline: 5px solid purple;
    outline-offset: 5px;
    /*Pushed 5px further out from our border . We can also put -ve value i.e -20px etc*/


}

#circle {
    margin: 3rem auto;
    background-color: gold;
    width: 100px;
    height: 100px;
    border: 2px solid #000;
    border-radius: 50px;
    outline: 2px solid red;
    outline-offset: 0.25rem;
}


/*Topic 6*/

/* we have made form in html and we can see that inheritance is seen in label but not in i/p and button*/

/* Text settings*/
div {
    text-decoration: underline;
    /* we can also do overline,underline,line-through and none*/
    text-transform: capitalize;
    /* we can also do lowercase,uppercase*/
    text-align: justify;
    /* justify make left and right equal and we can also use left,right also*/
    text-indent: 2cm;
    line-height: 1.5;
    letter-spacing: 0.1em;
    word-spacing: 1em;
    font-weight: 900;
    /*for boldness*/
    font-style: oblique;
    /*strong italic*/
    font-family: sans-serif;
}

/* Topic 7 */

/* This is anchor selector*/
a {
    text-decoration: none;
    /* cursor: not-allowed; */
    color: black;
    background: lightcoral;

}

/* PSEUDO CLASS: It represent the current status of the element because a state of an anchor element can change */


/* When a user clicks on a link and visits that URL, the browser remembers it.

On pages where the same link appears again, :visited lets you apply a different style to show that it’s been visited */

a:visited {
    color: purple;
}

a:hover,
a:focus {
    color: dodgerblue;
}

a:active {
    color: pink;
}

/* we should keep all these pseudo class are in proper order*/

/* Topic 8*/

/*List Style*/
ol {
    list-style-type: decimal;
    /* padding: 0; */
    text-align: center;
    list-style-position: inside;
    /* list-style-image: url(); */
    /* list style: square url("img") inside*/
    /* all the three properties (type,img,position) in one i.e shorthanded */
}

ul {
    list-style-type: square;
    text-align: center;
    color: purple;
    list-style-position: inside;
    /* it can be either inside or outside according to the browser */
}

/*
changing all list item

li{
color: red;
}

*/

/*
changing list section of unorder list

ul li{
color: red;
}

*/

ul li:nth-child(2) {
    /* we can also put even/odd in that number inside the bracket*/

    color: black;
}

/* Pseudo Element(marker) : we can change something about the markers and that's usually what we would have here for bullet or letters outside of an order list or numbers. It start with :: (two colons) */


ol ::marker {
    color: blueviolet;
    font-family: fantasy;
    font-size: 1em;
    content: "only $ 5              ";

}


/* Topic 9 */

/* CSS Display Property */
/*Automatically block level elements have a default 100% width and they stack top of each other.They also have some default margin. main is also a block element */

.hi {

    background-color: lightcoral;
    color: aqua;
    padding: 1rem;

}

/*
    These function are not working in these inline element span, to make it work we have to use --> display: inline-block
    
    margin-top: 100px;
    height: 200px; */

/* Topic 10 */
/* FLOAT AND CLEARS TUTUORIAL */

/* Float are used to float the things to the left and the right really any element that we want to and we can wrap text arount it and also we can use the floats inside of a container 
It pulls an element to the left or right of its container, and allows inline content (like text or images) to wrap around it.Floats were commonly used for layout before Flexbox and Grid, but now they are mostly used for wrapping text around images.

*/

.block {
    width: 30vw;
    height: 30vw;
    background-color: #000;
    color: #fff;
    padding: 0.01rem;
}

.left {
    float: left;
    margin-right: 1rem;
}

.right {
    float: right;
    margin-right: 1rem;
}


/* The clear property prevents elements from flowing next to floated elements, forcing them to appear below the float.

🧠 Common Values:
none (default): Allows elements to appear next to floats.

left: Moves the element below any left-floated elements.

right: Moves the element below any right-floated elements.

both: Moves the element below both left and right floated elements.

inherit: Inherits the value from its parent. */
/* .clear{
    clear:both;   
   } */

.look {
    background-color: bisque;
    border: 1px solid black;
    padding: 1rem;
    display: flow-root;
}


/* Topic 11
   CSS COLUMN */

.columns {
    column-count: 4;
    /* 4 ota column part garaidinxa*/
    column-width: 250px;
    /* imp thing is that the width should essentially never be less than 250 px per coloumn*/


    /*columns: 4 250px;        it is a short hand method*/
    column-rule: 3px solid black;
    column-gap: 3rem;
    /*column haru bich gap banauxa*/
}


.columns .head {
    margin-top: 0;
    background-color: black;
    color: #fff;
    padding: 0.5rem;
    break-inside: avoid;
    /* heading lai 2 part ma break huna bata avoid garxa*/
    break-before: column;
    /* heading lai column ko top ma matra rakhdinxa*/
}

.column,
.quote {
    font-size: 3rem;
    text-align: center;
    color: #000;
    column-span: all;
    margin-top: 2rem;

}

.columns p {
    margin-top: 0;
}


.nowrap {
    white-space: nowrap;
}

/* Topic 12
POSITION */

/* *{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
} */

.outer-container {

    border: 3px dashed #000;
    width: 75vw;
    height: 85vh;
    margin: 40px auto;
    position: relative;
}

.inner-container {
    border: 2px solid #00f;
    width: 40vw;
    height: 50vh;
    margin: 200px auto;
}

/*position:static --> It is the default of all elements.Elements are in static already*/

/* absolute positioning i.e(position:absolute) needs a relative parent, if it doesn't have an ancestor element that is positioned relative, then it takes the inital boundary/box which is esentially the browser window */

/* Any block over the another block is decided by what element comes first and what element comes last in html. we can also do by using css easily by using function z-index:1; in any box we want to highlight*/

.absolute {
    background-color: #00f;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
}

.relative {
    background-color: burlywood;
    position: relative;
    top: 300px;
    left: 100px;
}

/* .fixed {
    background-color: green;
    position: fixed;
    top: 100px
} */

.sticky {
    background-color: azure;
    position: sticky;
    top: 0;
}

/* Topic 13
CSS FLEX */

/* display:flex; created two invisible axis i.e main axis and cross axis.. our items are no longer stacked on top of one another because display flex is positioning our items on the main axis and by default our main axis is horizontal*/
.container{

    display:flex;
    max-width: 800px;
    min-height: 400px;
    margin-inline: auto;
    border: 3px solid #000;
    /*we can change the main axis vertical with the flex-direction property. if the    (flex-direction: coloumn;) then the main axis will be vertical and (flex-direction: row;) main axis is horizontal and by default it is already horizontal*/
    /* flex-direction: column; */
    
    /* justify-content aligns the items on the main axis. flex-start is the default*/
    justify-content: flex-end;
/* we have other function for justify content like: centre,space-between,space-around,space-evenly etc*/


/* we can also align item along the cross axis with the align items property*/
align-items: center;

/* baseline will align items. so that the baseline text of each item is aligned */
align-items: baseline; 


/*if there are much more item we created in the container than there will be high chance  of overflow. To avoid overflow we set a function flex-wrap:wrap;*/
flex-wrap: wrap;

/*now by doing flex-wrap:wrap; a new property is unlocked i.e align-content: ;*/
align-content: flex-end;

/* align-content only work when we have flex wrap set to wrap and have items wrapping. This property allows us to align everything on the cross axis*/

}

.item-1{
    font-size: 2rem;
    

}

.item-3{
     /* by default our items are laidout in the order of our HTML item1,item2,item3...We can use order property to change the order in which items appear.
      default value of this property is zero */
    order: -1;
}


/* Note: all this above flex box properties belong inside the container but there are properties belong in the direct children of the container. eg: flex-grow,flex-shrink,flex-basis */
.contain{
    
    max-width: 800px;
    min-height: 400px;
    margin-inline: auto;
    border: 3px solid #000;
    
    display: flex;
   
}

.mitem-1{
background-color: #00f;
color: white;
margin: 0;
/* flex grow takes a unitless value that serves as a proportion and allows the item to grow if there's enough space for it 

if they all have flex growth set to 1 then the remaining space will be distributed equally to all children
*/
flex-grow: 1;

}

.mitem-2{
    background-color: pink;
/*flex shrink also takes a unitless value,this property though define how fast one item shrinks in comparison to the others*/

    flex-shrink: 10;
    /*here item-2 will shrink much faster than the other items */

   /*flex-basis define the size of an item before the remaining space is distributed basically*/
    flex-basis: 300px

    /* short hand for flex- (grow,shrink,basis) is
    flex: 1 4 3 or we can also do flex: 1 it will set grow 1 and then other two optional values are set automatically*/
}


/*align self will overwrite the value you set in the align item on the container
eg:  mitem-1{ align-self:center;  }
*/


/* Topic-14*
 CSS GRID   /
 
 /* grid (short for CSS Grid Layout) is a powerful layout system used to create two-dimensional layouts on the web. It lets you design webpages by dividing a container into rows and columns, giving you full control over where items are placed. 
 display: grid;	Makes the element a grid container.
grid-template-columns	Defines the number and size of columns.
grid-template-rows	Defines the number and size of rows.
gap or grid-gap	Adds space between rows/columns.
grid-column	Controls an item’s position across columns.
grid-row	Controls an item’s position across rows.
place-items, justify-items, align-items	Aligns content inside grid.*/

/* margin:0;   padding:0;    box-sizing:border-box; */

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.op{
    font-family: sans-serif;
    min-height: 100vh;
}

.paranoid{
    display: grid;    /* all of these div instantly become grid items but it will not make any changes*/
   /* grid-auto-flow: column;   BY USING THIS FUNCTION WE CANNOT HAVE MUCH MORE CONTROL OVER THE COLOUMNS PROPERTY*/ 
   grid-template-columns: 200Px 100px 200px; 
  /* WE CAN USED THIS TO HAVE MORE CONTROL OVER COLUMN PROPERTY
   First column: 200px wide

Second column: 100px wide

Third column: 200px wide
*/
   /* SHORT HAND FOR IDENTICAL PROPERTIES
    grid-template-columns: repeat(2,1,2)
   grid-template-columns: repeat(2, 1fr 2fr); /* total of 4 columns: 1fr 2fr 1fr 2fr
   repeat() takes a number, not a length unit like px, as the first argument.
   Also, when using repeat(), the second argument should be a single track definition or a comma-separated list wrapped in square brackets, but this only works from CSS Grid Level 2 */
    
   /* FOR ROWS*/
   grid-auto-rows: minmax(150px,auto); /*or 200px*/
    
   row-gap: 1rem;
   column-gap: 1rem;
   /* The spaces are essentially called the gutters
   the shorthand for gap is [ gap: 1em 0.5em;] */

}
.box{
    background-color: black;
    color:white;
    font-size: 2rem;
    padding: 0.5rem;
}

.box:first-child{
    background-color: blue;

    /* shorthand: grid-row:1/4; */
    grid-column-start: 1;
    grid-column-end: 4;  /* now defining how many columns this child takes up and this is based on the lines of the grid. It really spans the first 3 columns */
   
   
 /* shorthand: grid-columns:1/3; */
    grid-row-start:1;
    grid-row-end:4;

    display:grid;
    align-content: center;
justify-content: center;

/*place-content:end centre  [it is a short hand for align content and justify content . First one is align and the second one is justify ]*/
    
}

.box:nth-child(2){
    background-color:purple;
   grid-column: 1/5;
   grid-row: 3/4;
    

}
/* grid is calculating where to put everything that we do not explicitly tell it to. Just like in flexbox, flex item could also be a flex container we can do that with grid also. We can nest a grid inside of a grid item. */


